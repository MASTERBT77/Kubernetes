1) Take a backup of the etcd cluster and save it to /opt/etcd-backup.db.
    - ETCDCTL_API=3 etcdctl --endpoints $ENDPOINT snapshot save snapshotdb
    - ETCDCTL_API=3 etcdctl snapshot --help
    - cat etc/kubernetes/manifest/etcd.yaml -- extract values
    - ETCDCTL_API=3 etcdctl --endpoints 127.0.0.1:2379 --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/server.crt --key=/etc/kubernetes/pki/etcd/server.key    snapshot save /opt/etcd-backup.db 

2) Create a Pod called redis-storage with image: redis:alpine with a Volume of type emptyDir that lasts for the life of the Pod.

apiVersion: v1
kind: Pod
metadata:
  name: redis-storage
spec:
  containers:
  - image: redis:alpine
    name: test-container
    volumeMounts:
    - mountPath: /data/redis
      name: cache-volume
  volumes:
    - name: cache-volume
      emptyDir:
        sizeLimit: 500Mi

3) Create a new pod called super-user-pod with image busybox:1.28. Allow the pod to be able to set system_time.
    The container should sleep for 4800 seconds.


apiVersion: v1
kind: Pod
metadata:
  name: super-user-pod
spec:
  containers:
  - name: sec-ctx-4
    image: busybox:1.28
    command: [ "sh", "-c", "sleep 4800" ]
    securityContext:
      capabilities:
        add: ["SYS_TIME"]

4) A pod definition file is created at /root/CKA/use-pv.yaml. Make use of this manifest file and mount the persistent volume called pv-1. Ensure the pod is running and the PV is bound.
        mountPath: /data
        persistentVolumeClaim Name: my-pvc

apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: use-pv
  name: use-pv
spec:
  volumes:
    - name: mypd
      persistentVolumeClaim:
        claimName: my-pvc  
  containers:
  - image: nginx
    name: use-pv
    volumeMounts:
      - mountPath: "/data"
        name: mypd
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: my-pvc
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: 10Mi
  storageClassName: ""

Name:            pv-1
Labels:          <none>
Annotations:     <none>
Finalizers:      [kubernetes.io/pv-protection]
StorageClass:    
Status:          Available
Claim:           
Reclaim Policy:  Retain
Access Modes:    RWO
VolumeMode:      Filesystem
Capacity:        10Mi
Node Affinity:   <none>
Message:         
Source:
    Type:          HostPath (bare host directory volume)
    Path:          /opt/data
    HostPathType:  
Events:            <none>


5) Create a new deployment called nginx-deploy, with image nginx:1.16 and 1 replica. Next upgrade the deployment to version 1.17 using rolling update.
    - kubectl create deployment nginx-deploy --image=nginx:1.16 --replicas=1
    - kubectl set image deployment/nginx-deploy nginx=nginx:1.17


6) Create a new user called john. Grant him access to the cluster. John should have permission to create, list, get, update and delete pods in the development namespace . The private key exists in the location: /root/CKA/john.key and csr at /root/CKA/john.csr.

Important Note: As of kubernetes 1.19, the CertificateSigningRequest object expects a signerName.

Please refer the documentation to see an example. The documentation tab is available at the top right of terminal.

    CSR: john-developer Status:Approved

    Role Name: developer, namespace: development, Resource: Pods

    Access: User 'john' has appropriate permissions



    - cat john.csr | base64 | tr -d "\n"
    - LS0tLS1CRUdJTiBDRVJUSUZJQ0FURSBSRVFVRVNULS0tLS0KTUlJQ1ZEQ0NBVHdDQVFBd0R6RU5NQXNHQTFVRUF3d0VhbTlvYmpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRApnZ0VQQURDQ0FRb0NnZ0VCQUtyUjRNT2ttcUVReTlxMUI0SFI5RUpxVi9JRmhHbDFnQ0hDY095UkxJWVlScWNTCmtyUmFOeUs3aGZKMG1aMGd3NFRrR01iTi90bHd3eWRRVm9xcXFpWnp5NFNjckFTc2YzajZqSmpKclV6M0hWZUoKK2FIVE9ZR3VYOXZ3QkV6aWRYbVhTWmRVelJlRjRBTlpxcnlQbGplVmhQbUovZkRXdzc1R21yZ2JkYzNxc3AyUwpQa1RRNkhkcTJuSVFieFNId0E1eGZrMzh5UVpqQUY3WlgvQTRWWGYrbU9PYzN2MWhjdEZmUklHRFdVK1RGanJLCkhQUGo5WDNQbUZocGZoZUpSYS9BOXU1VStQSjNyeGxNNUNTWDBUL204ajc0bTdyblNmWXJ2VExpNVo5Z3RJdUsKbnVhdnBxd1U5aUY4dEpvYmYrR3p3ZmtyTGpLM2phTTRmTlRhWEVNQ0F3RUFBYUFBTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ2UvbGIzdktHbnlQR2lUVm5vUWlwMnlnTHlDNExSUmdiTzJ4MHhHZTBIWWk1VFMvR0hXYUI1Cm1USTFCWEVCOU83UjR4eVA5eGhDaTlmbTh1aTcyV3V2Y2xvcW1lUHc5RWNvV3JHbGN5U0VGanEvTVVIQ2ppTUsKT2p5d0gycGZWK29OcGZoUlJIZmt1dFB0Wm8xYk5VVE11czJubEM1cFJscndLbHE4b0lHRDZwbU9PWHpQc05lVwplTVJKZFNMRjNLUWNwZWRCRmpKRVlUOEdrUmI2MVp6clRQd2hXeE9WcWlnMjdscC9wNUVMOU1LTVVpOVNWZmJYCkNINnQ1MlhISG9PejZzUDVUYzllRERrUzlWMGl4Rk5rYTdHUWJOSnVVYUJjaEs2KzVMWDNKeURONGppWmNkWUcKdWtVYUp0RWxiSmFLR1FXdGx2NXg3c2JyVExWSEQyMkMKLS0tLS1FTkQgQ0VSVElGSUNBVEUgUkVRVUVTVC0tLS0tCg==

    - vi CertificateSigningRequest.yaml 

                apiVersion: certificates.k8s.io/v1
        kind: CertificateSigningRequest
        metadata:
        name: myuser
        spec:
        request: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURSBSRVFVRVNULS0tLS0KTUlJQ1ZqQ0NBVDRDQVFBd0VURVBNQTBHQTFVRUF3d0dZVzVuWld4aE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRgpBQU9DQVE4QU1JSUJDZ0tDQVFFQTByczhJTHRHdTYxakx2dHhWTTJSVlRWMDNHWlJTWWw0dWluVWo4RElaWjBOCnR2MUZtRVFSd3VoaUZsOFEzcWl0Qm0wMUFSMkNJVXBGd2ZzSjZ4MXF3ckJzVkhZbGlBNVhwRVpZM3ExcGswSDQKM3Z3aGJlK1o2MVNrVHF5SVBYUUwrTWM5T1Nsbm0xb0R2N0NtSkZNMUlMRVI3QTVGZnZKOEdFRjJ6dHBoaUlFMwpub1dtdHNZb3JuT2wzc2lHQ2ZGZzR4Zmd4eW8ybmlneFNVekl1bXNnVm9PM2ttT0x1RVF6cXpkakJ3TFJXbWlECklmMXBMWnoyalVnald4UkhCM1gyWnVVV1d1T09PZnpXM01LaE8ybHEvZi9DdS8wYk83c0x0MCt3U2ZMSU91TFcKcW90blZtRmxMMytqTy82WDNDKzBERHk5aUtwbXJjVDBnWGZLemE1dHJRSURBUUFCb0FBd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBR05WdmVIOGR4ZzNvK21VeVRkbmFjVmQ1N24zSkExdnZEU1JWREkyQTZ1eXN3ZFp1L1BVCkkwZXpZWFV0RVNnSk1IRmQycVVNMjNuNVJsSXJ3R0xuUXFISUh5VStWWHhsdnZsRnpNOVpEWllSTmU3QlJvYXgKQVlEdUI5STZXT3FYbkFvczFqRmxNUG5NbFpqdU5kSGxpT1BjTU1oNndLaTZzZFhpVStHYTJ2RUVLY01jSVUyRgpvU2djUWdMYTk0aEpacGk3ZnNMdm1OQUxoT045UHdNMGM1dVJVejV4T0dGMUtCbWRSeEgvbUNOS2JKYjFRQm1HCkkwYitEUEdaTktXTU0xMzhIQXdoV0tkNjVoVHdYOWl4V3ZHMkh4TG1WQzg0L1BHT0tWQW9FNkpsYWFHdTlQVmkKdjlOSjVaZlZrcXdCd0hKbzZXdk9xVlA3SVFjZmg3d0drWm89Ci0tLS0tRU5EIENFUlRJRklDQVRFIFJFUVVFU1QtLS0tLQo=
        signerName: kubernetes.io/kube-apiserver-client
        expirationSeconds: 86400  # one day
        usages:
        - client auth

    - kubectl create role developer -n development --verb=create,list,get,update,delete --resource=pods
    - kubectl create rolebinding johnrole --role=developer --user=john -n development
    - kubectl auth can-i get pods --as john -n development

7) Create a nginx pod called nginx-resolver using image nginx, expose it internally with a service called nginx-resolver-service. Test that you are able to look up the service and pod names from within the cluster. Use the image: busybox:1.28 for dns lookup. Record results in /root/CKA/nginx.svc and /root/CKA/nginx.pod

    - kkubectl run nginx-resolver --image=nginx
    - kubectl expose pod nginx-resolver  --port=80 --name=nginx-resolver-service
    - kubectl run busybox --image=busybox:1.28 -- sleep 8000
    - kubectl exec busyboxssh -- nslookup nginx-resolver-service > /root/CKA/nginx.svc
    - kubectl exec busyboxssh -- nslookup 10.244.192.4 > /root/CKA/nginx.pod
8)Create a static pod on node01 called nginx-critical with image nginx and make sure that it is recreated/restarted automatically in case of a failure.

    - kubectl run nginx-critical --image=nginx --restart=Always --dry-run=client -o yaml > pod.yaml
    
